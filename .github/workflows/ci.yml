name: CI

on:
  push:
    branches: ['**']
    paths-ignore:
      - 'docs/**'
      - '.cursor/**'
  pull_request:
    branches: ['**']
    paths-ignore:
      - 'docs/**'
      - '.cursor/**'

permissions:
  contents: read

env:
  GO_VERSION: '1.25'

jobs:
  # Code Quality & Formatting
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Run linting
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

  # Code Formatting Check
  format:
    name: Format
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check formatting
      run: |
        unformatted=$(gofmt -d -s .)
        if [ -n "$unformatted" ]; then
          echo "Code is not formatted correctly:"
          echo "$unformatted"
          exit 1
        fi
        echo "âœ“ Code formatting is correct"

  # Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: make deps

    - name: Run unit tests
      run: make test-unit

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage/coverage.out
        flags: unittests
        name: ci-unit-tests
